// app/_layout.tsx - VERSION CORRIG√âE AVEC ULTRA SAFE AREA WRAPPER
import '@/lib/debugUtils';    // ‚Üê Debug .includes() en PREMIER
import '@/lib/polyfills'; 
import { Slot, router, useSegments, useRootNavigationState } from 'expo-router';
import { useFonts } from 'expo-font';
import { SplashScreen } from 'expo-router';
import { useEffect, useState, useCallback, useRef } from 'react';
import { AppState, AppStateStatus, Platform } from 'react-native';
import { ChatNotificationProvider } from '@/components/ChatNotificationProvider';
import { InAppNotification } from '@/components/InAppNotification';
import UltraSafeAreaWrapper from '@/components/SafeAreaWrapper'; // ‚Üê AJOUT√â

// üîî REMPLAC√â : Ancien service par le nouveau service unifi√©
import { 
  initializeNotifications, 
  cleanupNotifications,
  notificationService 
} from '@/lib/notifications';

import { supabase } from '@/lib/supabase';

export default function Layout() {
  const [fontsLoaded] = useFonts({
    Inter: require('@expo-google-fonts/inter/Inter_400Regular.ttf'),
  });

  const [currentUser, setCurrentUser] = useState<any>(null);
  const [authLoading, setAuthLoading] = useState(true);
  const [isReady, setIsReady] = useState(false);
  
  // ‚úÖ REFS DE S√âCURIT√â
  const mounted = useRef(false);
  const authSubscription = useRef<{ unsubscribe: () => void } | null>(null);
  const timeouts = useRef<Set<NodeJS.Timeout>>(new Set());
  const redirectionDone = useRef(false);
  const initStarted = useRef(false);
  
  const segments = useSegments();
  const navigationState = useRootNavigationState();

  // ‚úÖ HELPER TIMEOUT S√âCURIS√â
  const safeTimeout = useCallback((callback: () => void, delay: number) => {
    const timeout = setTimeout(() => {
      if (mounted.current) {
        timeouts.current.delete(timeout);
        callback();
      }
    }, delay);
    timeouts.current.add(timeout);
    return timeout;
  }, []);

  // ‚úÖ MONTAGE S√âCURIS√â
  useEffect(() => {
    console.log('üèóÔ∏è Layout principal - D√©but du montage...');
    mounted.current = true;
    
    const readyTimeout = safeTimeout(() => {
      if (mounted.current) {
        console.log('‚úÖ Layout principal pr√™t');
        setIsReady(true);
      }
    }, 300);

    return () => {
      console.log('üßπ Layout principal - D√©but du d√©montage...');
      mounted.current = false;
      
      // ‚úÖ NETTOYAGE COMPLET DES TIMEOUTS
      timeouts.current.forEach(t => clearTimeout(t));
      timeouts.current.clear();
      
      // ‚úÖ NETTOYAGE S√âCURIS√â DE LA SUBSCRIPTION
      if (authSubscription.current) {
        try {
          console.log('üßπ Nettoyage subscription auth...');
          authSubscription.current.unsubscribe();
        } catch (error) {
          console.warn('‚ö†Ô∏è Erreur unsubscribe:', error);
        } finally {
          authSubscription.current = null;
        }
      }
      
      console.log('‚úÖ Layout principal - D√©montage termin√©');
    };
  }, [safeTimeout]);

  // ‚úÖ HELPER AUTH ULTRA-S√âCURIS√â
  const getCurrentUser = useCallback(async () => {
    if (!mounted.current) {
      console.log('‚ö†Ô∏è getCurrentUser: composant non mont√©');
      return null;
    }

    try {
      // ‚úÖ V√âRIFICATION COMPL√àTE DE SUPABASE
      if (!supabase) {
        console.error('‚ùå Supabase non initialis√©');
        return null;
      }

      if (!supabase.auth) {
        console.error('‚ùå Supabase.auth non disponible');
        return null;
      }

      if (typeof supabase.auth.getUser !== 'function') {
        console.error('‚ùå supabase.auth.getUser n\'est pas une fonction');
        return null;
      }

      const { data: { user }, error } = await supabase.auth.getUser();
      
      if (error) {
        if (error.message?.includes('Invalid Refresh Token')) {
          console.log('üßπ Token invalide, nettoyage...');
          try {
            await supabase.auth.signOut();
          } catch (signOutError) {
            console.warn('‚ö†Ô∏è Erreur signOut:', signOutError);
          }
          return null;
        }
        
        if (error.message?.includes('Auth session missing')) {
          console.log('‚ÑπÔ∏è Aucune session active');
          return null;
        }
        
        console.error('‚ùå Erreur auth:', error.message);
        return null;
      }
      
      return user;
    } catch (error) {
      console.error('‚ùå Exception getCurrentUser:', error);
      return null;
    }
  }, []);

  // ‚úÖ INITIALISATION AUTH ULTRA-S√âCURIS√âE
  useEffect(() => {
    if (!isReady || initStarted.current) return;

    console.log('üîÑ Configuration de l\'authentification...');
    initStarted.current = true;
    
    const initAuth = async () => {
      try {
        if (!mounted.current) return;

        console.log('üìã R√©cup√©ration utilisateur initial...');
        const user = await getCurrentUser();
        
        if (mounted.current) {
          console.log('‚úÖ Utilisateur initial:', user ? `Connect√© (${user.id})` : 'Non connect√©');
          setCurrentUser(user);
          setAuthLoading(false);
          
          // üîî NOUVEAU : Initialisation s√©curis√©e des notifications
          if (user) {
            await initializeNotificationsSafely(user.id);
          }
        }
      } catch (error) {
        console.error('‚ùå Erreur init auth:', error);
        if (mounted.current) {
          setAuthLoading(false);
        }
      }
    };

    const setupAuthListener = () => {
      if (!mounted.current) return;

      try {
        // ‚úÖ V√âRIFICATIONS COMPL√àTES AVANT SETUP
        if (!supabase) {
          console.error('‚ùå Supabase non disponible pour listener');
          return;
        }

        if (!supabase.auth) {
          console.error('‚ùå Supabase.auth non disponible pour listener');
          return;
        }

        if (typeof supabase.auth.onAuthStateChange !== 'function') {
          console.error('‚ùå onAuthStateChange n\'est pas une fonction');
          return;
        }

        // ‚úÖ NETTOYAGE DE L'ANCIENNE SUBSCRIPTION
        if (authSubscription.current) {
          try {
            authSubscription.current.unsubscribe();
          } catch (error) {
            console.warn('‚ö†Ô∏è Erreur nettoyage ancienne subscription:', error);
          }
          authSubscription.current = null;
        }

        // ‚úÖ CR√âATION S√âCURIS√âE DE LA NOUVELLE SUBSCRIPTION
        const authResponse = supabase.auth.onAuthStateChange(async (event, session) => {
          if (!mounted.current) {
            console.log('‚ö†Ô∏è Auth change ignor√© - composant d√©mont√©');
            return;
          }
          
          console.log('üîî Auth state changed:', event, session?.user?.id || 'null');
          
          const user = session?.user || null;
          setCurrentUser(user);
          
          if (event === 'SIGNED_OUT') {
            redirectionDone.current = false;
            // üîî NOUVEAU : Nettoyage s√©curis√© des notifications
            await cleanupNotificationsSafely();
          } else if (event === 'SIGNED_IN' && user && mounted.current) {
            redirectionDone.current = false;
            // üîî NOUVEAU : Initialisation s√©curis√©e des notifications
            await initializeNotificationsSafely(user.id);
          }
        });

        // ‚úÖ V√âRIFICATION QUE LA RESPONSE CONTIENT BIEN data.subscription
        if (authResponse && authResponse.data && authResponse.data.subscription) {
          authSubscription.current = authResponse.data.subscription;
          console.log('‚úÖ Auth listener configur√© avec succ√®s');
        } else {
          console.error('‚ùå Subscription non trouv√©e dans la r√©ponse:', authResponse);
        }

      } catch (error) {
        console.error('‚ùå Erreur setup listener:', error);
      }
    };

    // ‚úÖ INITIALISATION IMM√âDIATE
    initAuth();
    setupAuthListener();

  }, [isReady, getCurrentUser]);

  // ‚úÖ NAVIGATION S√âCURIS√âE
  const performSafeNavigation = useCallback(async (route: string): Promise<boolean> => {
    if (!mounted.current || !router) {
      console.log(`‚ö†Ô∏è Navigation bloqu√©e vers ${route}`);
      return false;
    }

    try {
      console.log(`üß≠ Navigation vers: ${route}`);
      router.replace(route as any);
      return true;
    } catch (error) {
      console.error(`‚ùå Exception navigation vers ${route}:`, error);
      return false;
    }
  }, []);

  // ‚úÖ REDIRECTION CORRIG√âE - PAS DE REDIRECTION AUTOMATIQUE DEPUIS L'ACCUEIL
  useEffect(() => {
    if (authLoading || redirectionDone.current || !mounted.current) {
      return;
    }

    console.log('üöÄ √âvaluation redirection...');
    console.log('üìç Segments:', segments);
    console.log('üë§ Utilisateur:', currentUser ? 'Connect√©' : 'Non connect√©');

    const inAuth = segments[0] === '(auth)';
    const inTabs = segments[0] === '(tabs)';
    const inAdmin = segments[0] === 'admin';
    const isRoot = segments.length === 0; // Page d'accueil (index.tsx)
    const isNotFound = segments[0] === '+not-found';

    const redirectTimeout = safeTimeout(async () => {
      if (!mounted.current || redirectionDone.current) return;

      try {
        let needsRedirect = false;
        let targetRoute = '';

        if (currentUser) {
          // ‚úÖ CORRIG√â : Utilisateur connect√© - SEULEMENT rediriger depuis les pages d'auth
          // On retire `isRoot` pour permettre l'affichage de la page d'accueil
          if (inAuth) {
            needsRedirect = true;
            targetRoute = '/(tabs)';
            console.log('üîÑ Redirection utilisateur connect√© depuis auth vers tabs...');
          }
          // ‚úÖ Pour les 404, on redirige vers les tabs
          else if (isNotFound) {
            needsRedirect = true;
            targetRoute = '/(tabs)';
            console.log('üîÑ Redirection utilisateur connect√© depuis 404 vers tabs...');
          }
        } else {
          // ‚úÖ CORRIG√â : Utilisateur non connect√© - SEULEMENT prot√©ger les pages qui n√©cessitent une auth
          // On retire `isRoot` pour permettre l'affichage de la page d'accueil publique
          if (inTabs || inAdmin) {
            needsRedirect = true;
            targetRoute = '/auth/login';
            console.log('üîÑ Redirection utilisateur non connect√© vers login...');
          }
          // ‚úÖ Pour les 404, on redirige vers la page d'accueil
          else if (isNotFound) {
            needsRedirect = true;
            targetRoute = '/';
            console.log('üîÑ Redirection depuis 404 vers accueil...');
          }
        }

        if (needsRedirect && targetRoute) {
          const success = await performSafeNavigation(targetRoute);
          if (success || !mounted.current) {
            redirectionDone.current = true;
            console.log('‚úÖ Redirection termin√©e');
          }
        } else {
          redirectionDone.current = true;
          console.log('‚úÖ Pas de redirection n√©cessaire - Affichage de la page actuelle');
        }
      } catch (error) {
        console.error('‚ùå Erreur redirection:', error);
        redirectionDone.current = true;
      }
    }, 200);

    return () => {
      timeouts.current.delete(redirectTimeout);
      clearTimeout(redirectTimeout);
    };

  }, [currentUser, segments, authLoading, performSafeNavigation, safeTimeout]);

  // üîî NOUVELLES FONCTIONS DE NOTIFICATIONS S√âCURIS√âES
  const initializeNotificationsSafely = async (userId: string) => {
    if (!mounted.current) {
      console.log('‚ö†Ô∏è Initialisation notifications abandonn√©e - composant d√©mont√©');
      return;
    }
    
    try {
      console.log('üîî Initialisation s√©curis√©e des notifications pour:', userId);
      
      // Utiliser le nouveau service unifi√©
      const success = await initializeNotifications(userId);
      
      if (success) {
        console.log('‚úÖ Notifications initialis√©es avec succ√®s');
        
        // üÜï NOUVEAU : Afficher le status du service
        if (__DEV__) {
          const status = notificationService.getStatus();
          console.log('üìä Status notifications:', status);
        }
        
        // üÜï NOUVEAU : Test automatique en d√©veloppement
        if (__DEV__) {
          setTimeout(() => {
            if (mounted.current) {
              notificationService.sendTestNotification().then(testSent => {
                if (testSent) {
                  console.log('üß™ Notification de test envoy√©e');
                } else {
                  console.log('‚ö†Ô∏è Test de notification √©chou√©');
                }
              });
            }
          }, 3000); // D√©lai de 3 secondes pour laisser le temps √† l'initialisation
        }
      } else {
        console.log('‚ö†Ô∏è √âchec initialisation notifications');
        
        // üÜï NOUVEAU : Retry automatique apr√®s d√©lai
        setTimeout(() => {
          if (mounted.current) {
            console.log('üîÑ Tentative de r√©initialisation des notifications...');
            initializeNotificationsSafely(userId);
          }
        }, 5000); // Retry apr√®s 5 secondes
      }
    } catch (error) {
      console.error('‚ùå Erreur initialisation notifications:', error);
      
      // üÜï NOUVEAU : Diagnostic en cas d'erreur
      if (error.message?.includes('profiles')) {
        console.log('üí° Conseil: Le profil utilisateur semble manquant');
        console.log('üí° Utilisez le hook useAuth corrig√© pour cr√©er le profil automatiquement');
      }
    }
  };

  const cleanupNotificationsSafely = async () => {
    try {
      console.log('üßπ Nettoyage s√©curis√© des notifications...');
      
      // Utiliser le nouveau service unifi√©
      cleanupNotifications();
      
      console.log('‚úÖ Notifications nettoy√©es');
    } catch (error) {
      console.error('‚ùå Erreur cleanup notifications:', error);
    }
  };

  // üÜï NOUVEAU : Gestion de l'√©tat de l'app pour les notifications
  useEffect(() => {
    const handleAppStateChange = (nextAppState: AppStateStatus) => {
      if (!mounted.current || !currentUser) return;

      console.log('üì± √âtat app chang√©:', nextAppState);
      
      if (nextAppState === 'active') {
        // App devient active - v√©rifier les notifications
        if (notificationService.getStatus().isInitialized) {
          console.log('üîÑ App active - v√©rification des notifications...');
          // Le service g√®re automatiquement la v√©rification d'expiration des tokens
        } else if (currentUser?.id) {
          // R√©initialiser si le service n'est pas initialis√©
          console.log('üîÑ R√©initialisation des notifications (app active)...');
          initializeNotificationsSafely(currentUser.id);
        }
      }
    };

    const subscription = AppState.addEventListener('change', handleAppStateChange);
    
    return () => {
      subscription?.remove();
    };
  }, [currentUser]);

  // ‚úÖ SPLASH SCREEN
  useEffect(() => {
    if (fontsLoaded && !authLoading && isReady) {
      safeTimeout(async () => {
        try {
          await SplashScreen.hideAsync();
          console.log('‚úÖ Splash screen masqu√©');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erreur splash screen:', error);
        }
      }, 100);
    }
  }, [fontsLoaded, authLoading, isReady, safeTimeout]);

  // ‚úÖ CONDITIONS DE RENDU
  if (!isReady || !fontsLoaded || authLoading) {
    console.log('‚è≥ Chargement... ready:', isReady, 'fonts:', fontsLoaded, 'auth:', !authLoading);
    return null;
  }

  console.log('‚úÖ Layout principal rendu - Navigation autoris√©e');

  return (
    <UltraSafeAreaWrapper>
      <ChatNotificationProvider currentUserId={currentUser?.id}>
        <Slot />
        <InAppNotification />
      </ChatNotificationProvider>
    </UltraSafeAreaWrapper>
  );
}