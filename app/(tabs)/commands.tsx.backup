// app/(tabs)/commands.tsx - Version avec gestion des timeouts (corrigée)
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  FlatList,
  StyleSheet,
  SafeAreaView,
  ActivityIndicator,
  RefreshControl,
  Alert,
  Image,
  ScrollView,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { router } from 'expo-router';
import { supabase } from '@/lib/supabase';
import { useUserRole } from '@/hooks/useUserRole';

interface Order {
  id: number;
  service_id: number | null;
  service_title?: string;
  status: 'en_attente' | 'acceptee' | 'en_cours' | 'terminee' | 'annulee';
  date: string;
  start_time?: string;
  end_time?: string;
  proposed_amount: number;
  address: string;
  postal_code: string;
  city: string;
  description?: string;
  created_at: string;
  updated_at: string;
  services?: {
    title: string;
    categorie: string;
  } | null;
  fourmiz_profile?: {
    firstname: string;
    lastname: string;
    avatar_url?: string;
  } | null;
}

interface StatsCard {
  id: string;
  title: string;
  count: number;
  icon: keyof typeof Ionicons.glyphMap;
  color: string;
  bgColor: string;
  borderColor: string;
}

type FilterType = 'all' | 'en_attente' | 'acceptee' | 'en_cours' | 'terminee' | 'annulee';

const CommandsScreen = () => {
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  
  const { currentRole } = useUserRole();
  
  const [orders, setOrders] = useState<Order[]>([]);
  const [refreshing, setRefreshing] = useState(false);
  const [filter, setFilter] = useState<FilterType>('all');
  const [showFilterDropdown, setShowFilterDropdown] = useState(false);

  // Configuration des délais (en heures)
  const TIMEOUT_CONFIG = {
    WARNING_THRESHOLD: 12, // Avertissement après 12h
    CRITICAL_THRESHOLD: 24, // Critique après 24h
    AUTO_CANCEL_THRESHOLD: 48, // Annulation automatique après 48h
  };

  // Récupération de l'utilisateur
  useEffect(() => {
    const getUser = async () => {
      try {
        const { data: { user }, error } = await supabase.auth.getUser();
        
        if (user) {
          setCurrentUser(user);
        }
      } catch (error) {
        console.error('Erreur getUser:', error);
      }
    };
    
    getUser();
  }, []);

  useEffect(() => {
    if (currentUser) {
      loadOrders();
      checkTimeoutOrders();
    }
  }, [currentUser]);

  // Vérification périodique des timeouts
  useEffect(() => {
    if (!currentUser) return;

    const interval = setInterval(() => {
      checkTimeoutOrders();
    }, 30 * 60 * 1000); // 30 minutes

    return () => clearInterval(interval);
  }, [currentUser]);

  const loadOrders = async () => {
    try {
      if (!currentUser?.id) {
        setLoading(false);
        setRefreshing(false);
        return;
      }

      console.log('🔄 Chargement des commandes pour:', currentUser.id);

      const { data, error } = await supabase
        .from('orders')
        .select(`
          *,
          service_title,
          services (
            title,
            categorie
          ),
          fourmiz_profile:fourmiz_id (
            firstname,
            lastname,
            avatar_url
          )
        `)
        .eq('client_id', currentUser.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('❌ Erreur chargement commandes:', error);
        throw error;
      }

      console.log('✅ Commandes chargées:', data?.length || 0);
      setOrders(data || []);

    } catch (error) {
      console.error('💥 Erreur fatale chargement commandes:', error);
      Alert.alert('Erreur', 'Impossible de charger vos commandes');
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  const onRefresh = () => {
    setRefreshing(true);
    loadOrders();
    checkTimeoutOrders();
  };

  // Vérification des commandes en timeout
  const checkTimeoutOrders = async () => {
    if (!currentUser?.id) return;

    try {
      const { data: timeoutOrders, error } = await supabase
        .from('orders')
        .select('id, service_title, created_at, proposed_amount')
        .eq('client_id', currentUser.id)
        .eq('status', 'en_attente')
        .lt('created_at', new Date(Date.now() - TIMEOUT_CONFIG.WARNING_THRESHOLD * 60 * 60 * 1000).toISOString());

      if (error) throw error;

      // Traiter les commandes critiques
      for (const order of timeoutOrders || []) {
        const createdAt = new Date(order.created_at);
        const now = new Date();
        const hoursWaiting = Math.floor((now.getTime() - createdAt.getTime()) / (1000 * 60 * 60));

        if (hoursWaiting >= TIMEOUT_CONFIG.AUTO_CANCEL_THRESHOLD) {
          await handleAutoExpireOrder(order.id);
        }
      }

    } catch (error) {
      console.error('Erreur vérification timeout:', error);
    }
  };

  // Expiration automatique des commandes
  const handleAutoExpireOrder = async (orderId: number) => {
    try {
      const { error } = await supabase
        .from('orders')
        .update({
          status: 'expiree',
          updated_at: new Date().toISOString(),
          cancelled_at: new Date().toISOString(),
          cancelled_by: 'system'
        })
        .eq('id', orderId);

      if (error) throw error;

      console.log(`✅ Commande ${orderId} expirée automatiquement`);
      
      // Recharger les commandes
      loadOrders();

    } catch (error) {
      console.error('Erreur expiration automatique:', error);
    }
  };

  // Gestion des actions de timeout
  const handleRepostOrder = async (orderId: number) => {
    try {
      // Récupérer la commande originale
      const { data: originalOrder, error: fetchError } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();

      if (fetchError) throw fetchError;

      // Créer nouvelle commande
      const { data: newOrder, error: insertError } = await supabase
        .from('orders')
        .insert({
          ...originalOrder,
          id: undefined,
          created_at: new Date().toISOString(),
          updated_at: null,
          status: 'en_attente',
          fourmiz_id: null,
          accepted_at: null,
          cancelled_at: null,
          cancelled_by: null
        })
        .select('id')
        .single();

      if (insertError) throw insertError;

      // Marquer l'ancienne comme remplacée
      await supabase
        .from('orders')
        .update({
          status: 'remplacee',
          updated_at: new Date().toISOString(),
          replacement_order_id: newOrder.id
        })
        .eq('id', orderId);

      Alert.alert(
        '✅ Commande republiée',
        'Votre commande a été republiée avec succès.',
        [{ text: 'OK', onPress: () => loadOrders() }]
      );

    } catch (error) {
      Alert.alert('Erreur', 'Impossible de republier la commande');
    }
  };

  const handleIncreaseBudget = (orderId: number) => {
    const order = orders.find(o => o.id === orderId);
    if (!order) return;

    const suggestedAmount = Math.ceil(order.proposed_amount * 1.2);

    Alert.prompt(
      '💰 Nouveau budget',
      `Budget actuel: ${order.proposed_amount}€\nBudget suggéré: ${suggestedAmount}€`,
      [
        { text: 'Annuler', style: 'cancel' },
        { 
          text: 'Confirmer',
          onPress: async (newAmount) => {
            const amount = parseFloat(newAmount || '0');
            if (amount <= order.proposed_amount) {
              Alert.alert('Erreur', 'Le nouveau montant doit être supérieur au montant actuel');
              return;
            }

            try {
              const { error } = await supabase
                .from('orders')
                .update({
                  proposed_amount: amount,
                  updated_at: new Date().toISOString()
                })
                .eq('id', orderId);

              if (error) throw error;

              Alert.alert(
                '✅ Budget mis à jour',
                `Le budget a été porté à ${amount}€.`,
                [{ text: 'OK', onPress: () => loadOrders() }]
              );
            } catch (error) {
              Alert.alert('Erreur', 'Impossible de mettre à jour le budget');
            }
          }
        }
      ],
      'plain-text',
      suggestedAmount.toString()
    );
  };

  // Fonction pour vérifier si une commande est en timeout
  const isOrderInTimeout = (order: Order): boolean => {
    if (order.status !== 'en_attente') return false;
    
    const createdAt = new Date(order.created_at);
    const now = new Date();
    const hoursWaiting = Math.floor((now.getTime() - createdAt.getTime()) / (1000 * 60 * 60));
    
    return hoursWaiting >= TIMEOUT_CONFIG.WARNING_THRESHOLD;
  };

  // Fonction pour obtenir les heures d'attente
  const getWaitingHours = (order: Order): number => {
    const createdAt = new Date(order.created_at);
    const now = new Date();
    return Math.floor((now.getTime() - createdAt.getTime()) / (1000 * 60 * 60));
  };

  // Calcul des statistiques
  const pendingOrders = orders.filter(order => order.status === 'en_attente');
  const timeoutPendingOrders = pendingOrders.filter(order => isOrderInTimeout(order));
  const acceptedOrders = orders.filter(order => order.status === 'acceptee');
  const inProgressOrders = orders.filter(order => order.status === 'en_cours');
  const completedOrders = orders.filter(order => order.status === 'terminee');
  const cancelledOrders = orders.filter(order => order.status === 'annulee');

  // Statistiques pour les cartes du tableau de bord
  const statsCards: StatsCard[] = [
    {
      id: 'all',
      title: 'Total',
      count: orders.length,
      icon: 'apps',
      color: '#1f2937',
      bgColor: '#f8fafc',
      borderColor: '#e2e8f0'
    },
    {
      id: 'en_attente',
      title: 'En attente',
      count: pendingOrders.length,
      icon: timeoutPendingOrders.length > 0 ? 'warning' : 'time',
      color: timeoutPendingOrders.length > 0 ? '#dc2626' : '#d97706',
      bgColor: timeoutPendingOrders.length > 0 ? '#fee2e2' : '#fef3c7',
      borderColor: timeoutPendingOrders.length > 0 ? '#ef4444' : '#f59e0b'
    },
    {
      id: 'acceptee',
      title: 'Acceptées',
      count: acceptedOrders.length,
      icon: 'checkmark-circle',
      color: '#0369a1',
      bgColor: '#dbeafe',
      borderColor: '#3b82f6'
    },
    {
      id: 'en_cours',
      title: 'En cours',
      count: inProgressOrders.length,
      icon: 'play-circle',
      color: '#7c3aed',
      bgColor: '#e4d4f4',
      borderColor: '#8b5cf6'
    },
    {
      id: 'terminee',
      title: 'Terminées',
      count: completedOrders.length,
      icon: 'checkmark-done-circle',
      color: '#059669',
      bgColor: '#d1fae5',
      borderColor: '#10b981'
    },
    {
      id: 'annulee',
      title: 'Annulées',
      count: cancelledOrders.length,
      icon: 'close-circle',
      color: '#dc2626',
      bgColor: '#fee2e2',
      borderColor: '#ef4444'
    }
  ];

  // Filtrage des commandes
  const filteredOrders = filter === 'all' 
    ? orders 
    : filter === 'en_cours' 
      ? [...acceptedOrders, ...inProgressOrders]
      : orders.filter(order => order.status === filter);

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('fr-FR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
    });
  };

  const formatTime = (timeString?: string) => {
    if (!timeString) return '';
    return timeString.slice(0, 5);
  };

  const getStatusConfig = (status: string) => {
    switch (status) {
      case 'en_attente':
        return { label: 'En attente', color: '#d97706', bgColor: '#fef3c7' };
      case 'acceptee':
        return { label: 'Acceptée', color: '#0369a1', bgColor: '#dbeafe' };
      case 'en_cours':
        return { label: 'En cours', color: '#7c3aed', bgColor: '#e4d4f4' };
      case 'terminee':
        return { label: 'Terminée', color: '#059669', bgColor: '#d1fae5' };
      case 'annulee':
        return { label: 'Annulée', color: '#dc2626', bgColor: '#fee2e2' };
      default:
        return { label: status, color: '#6b7280', bgColor: '#f3f4f6' };
    }
  };

  const handleCancelOrder = async (orderId: number) => {
    Alert.alert(
      'Annuler la commande',
      'Êtes-vous sûr de vouloir annuler cette commande ? Cette action est irréversible.',
      [
        { text: 'Non', style: 'cancel' },
        {
          text: 'Oui, annuler',
          style: 'destructive',
          onPress: async () => {
            try {
              console.log('🚫 Tentative d\'annulation de la commande:', orderId);

              const { data: orderToCancel, error: fetchError } = await supabase
                .from('orders')
                .select('id, status, client_id')
                .eq('id', orderId)
                .eq('client_id', currentUser?.id)
                .single();

              if (fetchError) {
                console.error('❌ Erreur lors de la vérification:', fetchError);
                throw new Error('Commande introuvable');
              }

              if (!orderToCancel) {
                throw new Error('Vous n\'avez pas les droits pour annuler cette commande');
              }

              if (orderToCancel.status === 'terminee') {
                throw new Error('Impossible d\'annuler une commande terminée');
              }

              if (orderToCancel.status === 'annulee') {
                throw new Error('Cette commande est déjà annulée');
              }

              console.log('✅ Commande trouvée, procédure d\'annulation...');

              const updateData = {
                status: 'annulee' as const,
                updated_at: new Date().toISOString(),
                cancelled_at: new Date().toISOString(),
                cancelled_by: currentUser.id
              };

              console.log('📤 Données d\'annulation:', updateData);

              const { error: updateError } = await supabase
                .from('orders')
                .update(updateData)
                .eq('id', orderId)
                .eq('client_id', currentUser?.id);

              if (updateError) {
                console.error('❌ Erreur lors de la mise à jour:', updateError);
                throw new Error(`Erreur de mise à jour: ${updateError.message}`);
              }
              
              console.log('✅ Commande annulée avec succès');
              
              Alert.alert(
                '✅ Commande annulée', 
                'Votre commande a été annulée avec succès.',
                [{ text: 'OK', onPress: () => loadOrders() }]
              );
              
            } catch (error: any) {
              console.error('💥 Erreur lors de l\'annulation:', error);
              Alert.alert(
                'Erreur d\'annulation', 
                error.message || 'Impossible d\'annuler la commande. Veuillez réessayer.'
              );
            }
          },
        },
      ]
    );
  };

  const handleChatOrder = (orderId: number) => {
    router.push(`/chat/${orderId}`);
  };

  const getOrderTitle = (order: Order): string => {
    if (order.service_id === null && order.service_title) {
      return order.service_title;
    }
    
    if (order.services?.title) {
      return order.services.title;
    }
    
    return 'Service';
  };

  const getOrderCategory = (order: Order): string => {
    if (order.service_id === null) {
      return 'Demande personnalisée';
    }
    
    return order.services?.categorie || '';
  };

  // Fonction pour obtenir le nom du filtre actuel
  const getCurrentFilterName = () => {
    const currentCard = statsCards.find(card => card.id === filter);
    return currentCard ? `${currentCard.title} (${currentCard.count})` : 'Toutes';
  };

  // Fonction pour sélectionner un filtre
  const selectFilter = (filterId: FilterType) => {
    setFilter(filterId);
    setShowFilterDropdown(false);
  };

  // Composant carte statistique
  const StatsCard = ({ card, onPress, isActive }: { 
    card: StatsCard; 
    onPress: () => void;
    isActive: boolean;
  }) => (
    <TouchableOpacity
      style={[
        styles.statsCard,
        { 
          backgroundColor: card.bgColor,
          borderColor: card.borderColor,
          borderWidth: isActive ? 2 : 1,
          opacity: isActive ? 1 : 0.8
        }
      ]}
      onPress={onPress}
      activeOpacity={0.7}
    >
      <View style={styles.statsCardContent}>
        <View style={styles.statsCardHeader}>
          <Ionicons name={card.icon} size={20} color={card.color} />
          <Text style={[styles.statsCardCount, { color: card.color }]}>
            {card.count}
          </Text>
        </View>
        <Text style={[styles.statsCardTitle, { color: card.color }]}>
          {card.title}
        </Text>
      </View>
    </TouchableOpacity>
  );

  const renderOrderItem = ({ item: order }: { item: Order }) => {
    const statusConfig = getStatusConfig(order.status);
    const orderTitle = getOrderTitle(order);
    const orderCategory = getOrderCategory(order);
    const isTimeout = isOrderInTimeout(order);
    const waitingHours = getWaitingHours(order);

    return (
      <View style={styles.orderCard}>
        {/* Alerte de timeout si nécessaire */}
        {isTimeout && (
          <View style={styles.timeoutBanner}>
            <Ionicons 
              name={waitingHours >= 48 ? "alert-circle" : "warning"} 
              size={16} 
              color={waitingHours >= 48 ? "#dc2626" : "#d97706"} 
            />
            <Text style={[
              styles.timeoutText,
              { color: waitingHours >= 48 ? "#dc2626" : "#d97706" }
            ]}>
              En attente depuis {waitingHours}h
              {waitingHours >= 48 && " - Aucune Fourmiz disponible"}
            </Text>
          </View>
        )}

        <View style={styles.orderHeader}>
          <View style={styles.orderTitleContainer}>
            <Text style={styles.orderTitle}>
              {orderTitle}
            </Text>
            <Text style={styles.orderCategory}>
              {orderCategory}
            </Text>
          </View>
          <View style={[styles.statusBadge, { backgroundColor: statusConfig.bgColor }]}>
            <Text style={[styles.statusText, { color: statusConfig.color }]}>
              {statusConfig.label}
            </Text>
          </View>
        </View>

        <View style={styles.orderDetails}>
          <View style={styles.detailRow}>
            <Ionicons name="calendar" size={16} color="#6b7280" />
            <Text style={styles.detailText}>
              {formatDate(order.date)}
              {order.start_time && ` à ${formatTime(order.start_time)}`}
              {order.end_time && ` - ${formatTime(order.end_time)}`}
            </Text>
          </View>

          <View style={styles.detailRow}>
            <Ionicons name="location" size={16} color="#6b7280" />
            <Text style={styles.detailText} numberOfLines={2}>
              {order.address}
              {order.postal_code && order.city && `, ${order.postal_code} ${order.city}`}
            </Text>
          </View>

          <View style={styles.detailRow}>
            <Ionicons name="card" size={16} color="#6b7280" />
            <Text style={styles.detailText}>{order.proposed_amount}€</Text>
          </View>

          {order.service_id === null && order.description && (
            <View style={styles.detailRow}>
              <Ionicons name="document-text" size={16} color="#6b7280" />
              <Text style={styles.detailText} numberOfLines={2}>
                {order.description}
              </Text>
            </View>
          )}
        </View>

        {order.fourmiz_profile && (
          <View style={styles.fourmizSection}>
            <Text style={styles.fourmizSectionTitle}>Fourmiz assignée</Text>
            <View style={styles.fourmizInfo}>
              {order.fourmiz_profile.avatar_url ? (
                <Image source={{ uri: order.fourmiz_profile.avatar_url }} style={styles.fourmizAvatar} />
              ) : (
                <View style={styles.fourmizAvatarPlaceholder}>
                  <Ionicons name="person" size={20} color="#6b7280" />
                </View>
              )}
              <View style={styles.fourmizDetails}>
                <Text style={styles.fourmizName}>
                  {order.fourmiz_profile.firstname} {order.fourmiz_profile.lastname}
                </Text>
              </View>
            </View>
          </View>
        )}

        {/* Actions de timeout pour les commandes en attente */}
        {isTimeout && (
          <View style={styles.timeoutActions}>
            <TouchableOpacity 
              style={styles.timeoutActionButton}
              onPress={() => handleIncreaseBudget(order.id)}
            >
              <Ionicons name="trending-up" size={16} color="#0066cc" />
              <Text style={styles.timeoutActionText}>Augmenter le budget</Text>
            </TouchableOpacity>

            <TouchableOpacity 
              style={styles.timeoutActionButton}
              onPress={() => handleRepostOrder(order.id)}
            >
              <Ionicons name="refresh" size={16} color="#059669" />
              <Text style={styles.timeoutActionText}>Republier</Text>
            </TouchableOpacity>
          </View>
        )}

        {/* Actions normales */}
        <View style={styles.commandActions}>
          {(order.status === 'acceptee' || order.status === 'en_cours') && (
            <TouchableOpacity 
              style={styles.chatButton}
              onPress={() => handleChatOrder(order.id)}
            >
              <Ionicons name="chatbubble-outline" size={16} color="#3b82f6" />
              <Text style={styles.chatButtonText}>Discuter</Text>
            </TouchableOpacity>
          )}

          {(order.status === 'en_attente' || order.status === 'acceptee') && (
            <TouchableOpacity 
              style={styles.cancelButton}
              onPress={() => handleCancelOrder(order.id)}
            >
              <Ionicons name="close-circle-outline" size={16} color="#ef4444" />
              <Text style={styles.cancelButtonText}>Annuler</Text>
            </TouchableOpacity>
          )}
        </View>
      </View>
    );
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#FF4444" />
          <Text style={styles.loadingText}>Chargement de vos commandes...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.pageTitle}>Mes Commandes</Text>
        {timeoutPendingOrders.length > 0 && (
          <View style={styles.timeoutIndicator}>
            <Ionicons name="warning" size={16} color="#dc2626" />
            <Text style={styles.timeoutIndicatorText}>{timeoutPendingOrders.length}</Text>
          </View>
        )}
      </View>

      {/* Tableau de bord des statistiques */}
      <ScrollView 
        horizontal 
        showsHorizontalScrollIndicator={false}
        style={styles.dashboardContainer}
        contentContainerStyle={styles.dashboardContent}
      >
        {statsCards.map((card) => (
          <StatsCard
            key={card.id}
            card={card}
            onPress={() => selectFilter(card.id as FilterType)}
            isActive={filter === card.id}
          />
        ))}
      </ScrollView>

      {/* Menu déroulant de filtre moderne */}
      <View style={styles.filterSection}>
        <Text style={styles.filterLabel}>Affichage :</Text>
        <View style={styles.dropdownContainer}>
          <TouchableOpacity
            style={styles.dropdownButton}
            onPress={() => setShowFilterDropdown(!showFilterDropdown)}
          >
            <Text style={styles.dropdownButtonText}>
              {getCurrentFilterName()}
            </Text>
            <Ionicons 
              name={showFilterDropdown ? "chevron-up" : "chevron-down"} 
              size={20} 
              color="#6b7280" 
            />
          </TouchableOpacity>

          {showFilterDropdown && (
            <>
              <TouchableOpacity 
                style={styles.dropdownOverlay} 
                onPress={() => setShowFilterDropdown(false)}
                activeOpacity={1}
              />
              <View style={styles.dropdownMenu}>
                {statsCards.map((card) => (
                  <TouchableOpacity
                    key={card.id}
                    style={[
                      styles.dropdownOption,
                      filter === card.id && styles.selectedDropdownOption
                    ]}
                    onPress={() => selectFilter(card.id as FilterType)}
                  >
                    <View style={styles.dropdownOptionContent}>
                      <Ionicons name={card.icon} size={18} color={card.color} />
                      <Text style={[
                        styles.dropdownOptionText,
                        filter === card.id && styles.selectedDropdownText
                      ]}>
                        {card.title} ({card.count})
                      </Text>
                    </View>
                    {filter === card.id && (
                      <Ionicons name="checkmark" size={18} color="#FF4444" />
                    )}
                  </TouchableOpacity>
                ))}
              </View>
            </>
          )}
        </View>
      </View>

      {/* Liste des commandes */}
      {filteredOrders.length === 0 ? (
        <View style={styles.emptyContainer}>
          <Ionicons name="list-outline" size={64} color="#d1d5db" />
          <Text style={styles.emptyTitle}>
            {filter === 'all' ? 'Aucune commande' : `Aucune commande ${getStatusConfig(filter).label.toLowerCase()}`}
          </Text>
          <Text style={styles.emptySubtitle}>
            Vous n'avez pas encore passé de commande
          </Text>
          {filter === 'all' && (
            <TouchableOpacity 
              style={styles.emptyButton}
              onPress={() => router.push('/(tabs)/services')}
            >
              <Text style={styles.emptyButtonText}>Découvrir les services</Text>
            </TouchableOpacity>
          )}
        </View>
      ) : (
        <FlatList
          data={filteredOrders}
          keyExtractor={(item) => item.id.toString()}
          renderItem={renderOrderItem}
          refreshControl={
            <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
          }
          contentContainerStyle={styles.listContainer}
          showsVerticalScrollIndicator={false}
        />
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0',
  },
  pageTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#1a202c',
  },
  timeoutIndicator: {
    position: 'absolute',
    right: 20,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fee2e2',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    gap: 4,
  },
  timeoutIndicatorText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#dc2626',
  },
  
  // Tableau de bord des statistiques
  dashboardContainer: {
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0',
  },
  dashboardContent: {
    paddingHorizontal: 20,
    paddingVertical: 16,
    gap: 12,
  },
  statsCard: {
    minWidth: 110,
    borderRadius: 12,
    paddingVertical: 16,
    paddingHorizontal: 14,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  statsCardContent: {
    alignItems: 'center',
  },
  statsCardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    marginBottom: 4,
  },
  statsCardCount: {
    fontSize: 18,
    fontWeight: '700',
  },
  statsCardTitle: {
    fontSize: 12,
    fontWeight: '600',
    textAlign: 'center',
  },
  
  // Section de filtre
  filterSection: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0',
    gap: 12,
  },
  filterLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#4a5568',
  },
  
  // Menu déroulant moderne
  dropdownContainer: {
    position: 'relative',
    flex: 1,
    zIndex: 1000,
  },
  dropdownButton: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#f7fafc',
    borderWidth: 1,
    borderColor: '#e2e8f0',
    borderRadius: 8,
    paddingHorizontal: 14,
    paddingVertical: 10,
    minHeight: 42,
  },
  dropdownButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#2d3748',
    flex: 1,
  },
  dropdownOverlay: {
    position: 'absolute',
    top: -500,
    left: -500,
    right: -500,
    bottom: -500,
    zIndex: 998,
    backgroundColor: 'transparent',
  },
  dropdownMenu: {
    position: 'absolute',
    top: 44,
    left: 0,
    right: 0,
    backgroundColor: '#ffffff',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e2e8f0',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 8,
    zIndex: 999,
    overflow: 'hidden',
    maxHeight: 300,
  },
  dropdownOption: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 14,
    paddingVertical: 12,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#f1f5f9',
  },
  selectedDropdownOption: {
    backgroundColor: '#fff5f5',
    borderLeftWidth: 3,
    borderLeftColor: '#FF4444',
  },
  dropdownOptionContent: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
    flex: 1,
  },
  dropdownOptionText: {
    fontSize: 14,
    color: '#2d3748',
    fontWeight: '500',
  },
  selectedDropdownText: {
    color: '#FF4444',
    fontWeight: '600',
  },
  
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#6b7280',
  },
  listContainer: {
    padding: 20,
  },
  orderCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
    borderWidth: 1,
    borderColor: '#f1f5f9',
  },
  
  // Styles pour les alertes de timeout
  timeoutBanner: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fef3c7',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    marginBottom: 12,
    gap: 8,
    borderLeftWidth: 4,
    borderLeftColor: '#f59e0b',
  },
  timeoutText: {
    fontSize: 12,
    fontWeight: '600',
    flex: 1,
  },
  timeoutActions: {
    flexDirection: 'row',
    gap: 8,
    marginBottom: 12,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#f1f5f9',
  },
  timeoutActionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f8fafc',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
    gap: 6,
    flex: 1,
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: '#e2e8f0',
  },
  timeoutActionText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#4a5568',
  },
  
  orderHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  orderTitleContainer: {
    flex: 1,
    marginRight: 12,
  },
  orderTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1a202c',
    marginBottom: 4,
  },
  orderCategory: {
    fontSize: 14,
    color: '#718096',
  },
  statusBadge: {
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 6,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '600',
  },
  orderDetails: {
    marginBottom: 12,
  },
  detailRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  detailText: {
    marginLeft: 8,
    fontSize: 14,
    color: '#4a5568',
    flex: 1,
  },
  fourmizSection: {
    marginBottom: 12,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#f7fafc',
  },
  fourmizSectionTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#4a5568',
    marginBottom: 8,
  },
  fourmizInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  fourmizAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
  },
  fourmizAvatarPlaceholder: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#f7fafc',
    justifyContent: 'center',
    alignItems: 'center',
  },
  fourmizDetails: {
    marginLeft: 12,
    flex: 1,
  },
  fourmizName: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1a202c',
  },
  commandActions: {
    flexDirection: 'row',
    gap: 12,
  },
  chatButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#ebf4ff',
    paddingHorizontal: 14,
    paddingVertical: 10,
    borderRadius: 8,
    gap: 6,
    flex: 1,
    minHeight: 42,
    justifyContent: 'center',
  },
  chatButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#3182ce',
  },
  cancelButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fed7d7',
    paddingHorizontal: 14,
    paddingVertical: 10,
    borderRadius: 8,
    gap: 6,
    flex: 1,
    minHeight: 42,
    justifyContent: 'center',
  },
  cancelButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#e53e3e',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 32,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#1a202c',
    marginTop: 16,
    marginBottom: 8,
  },
  emptySubtitle: {
    fontSize: 16,
    color: '#718096',
    textAlign: 'center',
    marginBottom: 24,
    lineHeight: 24,
  },
  emptyButton: {
    backgroundColor: '#FF4444',
    paddingHorizontal: 24,
    paddingVertical: 14,
    borderRadius: 8,
    minHeight: 48,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#FF4444',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  emptyButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default CommandsScreen;