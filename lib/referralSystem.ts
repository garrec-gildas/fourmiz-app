// ‚úÖ REFERRAL SYSTEM COMPLET - Version corrig√©e avec toutes les fonctionnalit√©s
// üîß Version modifi√©e pour corriger les noms de colonnes user_referrals

import { supabase } from './supabase';

// Types corrig√©s et enrichis
export interface ReferralValidation {
  isValid: boolean;
  referrerId?: string;
  referrerName?: string;
  referrerCode?: string;
  error?: string;
}

export interface ReferralStats {
  totalFilleuls: number;
  filleulesActifs: number;
  filleulesClients: number;
  filleulesFourmiz: number;
  filleulesProfilComplet: number;
  filleulesRecents: number;
  totalBonusEarned: number;
  totalCommissionEarned: number;
  filleulesWithFirstOrder: number;
}

export interface FilleulData {
  id: string;
  filleulId: string;
  name: string;
  email: string;
  roles: string[];
  type: 'client' | 'fourmiz';
  codeUtilise: string;
  statut: string;
  dateParrainage: string;
  dateInscription: string;
  profileCompleted: boolean;
  bonusEarned: number;
  totalCommissionEarned: number;
  firstOrderCompleted: boolean;
  firstOrderDate: string | null;
}

export interface ParrainData {
  id: string;
  name: string;
  codeUtilise: string;
  dateParrainage: string;
  bonusEarned: number;
  totalCommissionEarned: number;
}

// ===== VALIDATION DU CODE DE PARRAINAGE (VERSION DEBUG) =====
export const validateReferralCode = async (code: string): Promise<ReferralValidation> => {
  // ‚ûï LIGNE DE TEST - POUR V√âRIFIER QUE LE NOUVEAU FICHIER EST UTILIS√â
  console.log('üöÄ NOUVEAU FICHIER D√âTECT√â - Version debug active');
  
  if (!code.trim()) {
    return { isValid: false };
  }

  try {
    console.log('üîç DEBUG - Validation code:', code);

    // ‚ûï TEST SQL DIRECT POUR DIAGNOSTIC
    const { data: directTest, error: directError } = await supabase
      .from('user_referral_codes')
      .select('code, user_id, is_active')
      .eq('code', code.toUpperCase())
      .eq('is_active', true);

    console.log('üîç DEBUG - Test direct SQL:', directTest, 'Error:', directError);

    // Test 1: V√©rifier que le code existe
    const { data: codeData, error: codeError } = await supabase
      .from('user_referral_codes')
      .select('*')
      .eq('code', code.toUpperCase())
      .eq('is_active', true);

    console.log('üîç DEBUG - Code data:', codeData, 'Error:', codeError);

    if (codeError || !codeData || codeData.length === 0) {
      console.log('‚ùå DEBUG - Code non trouv√©');
      return { 
        isValid: false, 
        error: 'Code de parrainage invalide ou inactif' 
      };
    }

    // Test 2: R√©cup√©rer les infos du propri√©taire
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .select('id, firstname, lastname, email')
      .eq('id', codeData[0].user_id)
      .single();

    console.log('üîç DEBUG - Profile data:', profileData, 'Error:', profileError);

    if (profileError || !profileData) {
      console.log('‚ùå DEBUG - Profil non trouv√©');
      return { 
        isValid: false, 
        error: 'Utilisateur propri√©taire du code introuvable' 
      };
    }

    console.log('‚úÖ DEBUG - Validation r√©ussie');
    
    return {
      isValid: true,
      referrerId: profileData.id,
      referrerName: `${profileData.firstname} ${profileData.lastname}`,
      referrerCode: codeData[0].code
    };

  } catch (error) {
    console.error('üí• DEBUG - Erreur validation:', error);
    return { 
      isValid: false, 
      error: 'Erreur lors de la validation: ' + (error?.message || 'Erreur inconnue')
    };
  }
};

// ===== G√âN√âRATION CODE UNIQUE (optimis√©) =====
export const generateUniqueCode = async (): Promise<string> => {
  const digits = '0123456789';
  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  let attempts = 0;
  const maxAttempts = 10;
  
  while (attempts < maxAttempts) {
    let result = '';
    
    // Format CLCLCL : alternance chiffre-lettre
    for (let i = 0; i < 6; i++) {
      if (i % 2 === 0) {
        result += digits.charAt(Math.floor(Math.random() * digits.length));
      } else {
        result += letters.charAt(Math.floor(Math.random() * letters.length));
      }
    }
    
    // V√©rifier unicit√©
    const { data: existing } = await supabase
      .from('user_referral_codes')
      .select('code')
      .eq('code', result)
      .single();
    
    if (!existing) {
      console.log(`‚úÖ Code unique g√©n√©r√©: ${result}`);
      return result;
    }
    
    attempts++;
  }
  
  // Fallback avec timestamp
  const timestamp = Date.now().toString();
  return '9Z' + timestamp.slice(-2) + 'X' + timestamp.slice(-1);
};

// ===== CR√âATION LIEN DE PARRAINAGE (CORRIG√â ET UNIFI√â) =====
export const createReferralLink = async (
  parrainId: string, 
  filleulId: string, 
  codeUtilise: string
): Promise<boolean> => {
  try {
    console.log('üîó Cr√©ation lien parrainage:', { parrainId, filleulId, codeUtilise });

    // V√©rifier si le lien existe d√©j√† pour √©viter les doublons
    const { data: existing } = await supabase
      .from('user_referrals')
      .select('id')
      .eq('referred_user_id', filleulId)
      .eq('referrer_user_id', parrainId)
      .single();

    if (existing) {
      console.log('‚úÖ Lien de parrainage existe d√©j√†:', existing.id);
      return true; // Consid√©r√© comme succ√®s
    }

    // ‚úÖ COLONNES CORRIG√âES selon votre vraie structure DB
    const { data, error } = await supabase
      .from('user_referrals')
      .insert({
        referrer_user_id: parrainId,        // ‚úÖ Nom correct - PARRAIN
        referred_user_id: filleulId,        // ‚úÖ Nom correct - FILLEUL
        referral_code: codeUtilise,         // ‚úÖ Nom correct
        status: 'active',                   // ‚úÖ Statut actif par d√©faut
        bonus_earned: 0,                    // ‚ûï Pr√™t pour le bonus
        total_commission_earned: 0,         // ‚ûï Pr√™t pour les commissions
        first_order_completed: false,       // ‚ûï Flag premi√®re commande
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erreur cr√©ation lien:', error);
      return false;
    }

    console.log('‚úÖ Lien de parrainage cr√©√© avec succ√®s:', data);

    // ‚ûï NOUVEAU : Incr√©menter le compteur d'usage du code
    const { error: updateError } = await supabase
      .from('user_referral_codes')
      .update({ 
        usage_count: supabase.sql`usage_count + 1`,  // Incr√©ment atomique
        updated_at: new Date().toISOString()
      })
      .eq('code', codeUtilise)
      .eq('is_active', true);

    if (updateError) {
      console.warn('‚ö†Ô∏è Erreur mise √† jour compteur usage:', updateError);
      // On ne fait pas √©chouer le parrainage pour autant
    } else {
      console.log('‚úÖ Compteur d\'usage mis √† jour');
    }

    return true;

  } catch (error) {
    console.error('üí• Exception lien parrainage:', error);
    return false;
  }
};

// ===== FONCTION ALTERNATIVE POUR COMPATIBILIT√â (ordre param√®tres diff√©rent) =====
export const createReferralLinkLegacy = async (
  filleulId: string, 
  parrainId: string, 
  codeUtilise: string
): Promise<boolean> => {
  // Appelle la fonction principale avec les param√®tres r√©ordonn√©s
  return await createReferralLink(parrainId, filleulId, codeUtilise);
};

// ===== APPLICATION COMPL√àTE DU PARRAINAGE =====
export const applyReferral = async (filleulId: string, code: string): Promise<boolean> => {
  console.log('üéØ Application parrainage:', { filleulId, code });
  
  try {
    // 1. Valider le code
    const validation = await validateReferralCode(code);
    if (!validation.isValid || !validation.referrerId) {
      console.log('‚ùå Code invalide, abandon');
      return false;
    }

    // 2. V√©rifier que l'utilisateur peut √™tre parrain√©
    const canBeReferred = await canUserBeReferred(filleulId);
    if (!canBeReferred) {
      console.log('‚ùå Utilisateur d√©j√† parrain√©');
      return false;
    }

    // 3. Cr√©er le lien
    const linkCreated = await createReferralLink(
      validation.referrerId,
      filleulId,
      code
    );

    if (!linkCreated) {
      console.log('‚ùå √âchec cr√©ation lien');
      return false;
    }

    console.log('‚úÖ Parrainage appliqu√© avec succ√®s !');
    return true;

  } catch (error) {
    console.error('üí• Erreur application parrainage:', error);
    return false;
  }
};

// ===== R√âCUP√âRATION DES FILLEULS (CORRIG√â) =====
export const getUserReferrals = async (parrainId: string): Promise<FilleulData[]> => {
  try {
    console.log('üìã R√©cup√©ration filleuls pour:', parrainId);

    // ‚úÖ REQU√äTE CORRIG√âE avec les bons noms de colonnes
    const { data: referrals, error } = await supabase
      .from('user_referrals')
      .select(`
        id,
        referral_code,
        status,
        bonus_earned,
        total_commission_earned,
        first_order_completed,
        first_order_date,
        created_at,
        referred_user:referred_user_id (
          id,
          firstname,
          lastname,
          email,
          roles,
          profile_completed,
          created_at
        )
      `)
      .eq('referrer_user_id', parrainId)  // ‚úÖ Nom correct
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå Erreur r√©cup√©ration filleuls:', error);
      return [];
    }

    if (!referrals || referrals.length === 0) {
      console.log('‚ÑπÔ∏è Aucun filleul trouv√©');
      return [];
    }

    console.log(`‚úÖ ${referrals.length} filleul(s) trouv√©(s)`);
    
    return referrals
      .filter(r => r.referred_user)
      .map(referral => ({
        id: referral.id,
        filleulId: referral.referred_user.id,
        name: `${referral.referred_user.firstname} ${referral.referred_user.lastname}`,
        email: referral.referred_user.email,
        roles: referral.referred_user.roles || [],
        type: (referral.referred_user.roles?.includes('fourmiz')) ? 'fourmiz' : 'client',
        codeUtilise: referral.referral_code,           // ‚úÖ Nom correct
        statut: referral.status,                       // ‚úÖ Nom correct
        dateParrainage: referral.created_at,
        dateInscription: referral.referred_user.created_at,
        profileCompleted: referral.referred_user.profile_completed,
        // ‚ûï NOUVELLES DONN√âES financi√®res
        bonusEarned: parseFloat(referral.bonus_earned || '0'),
        totalCommissionEarned: parseFloat(referral.total_commission_earned || '0'),
        firstOrderCompleted: referral.first_order_completed || false,
        firstOrderDate: referral.first_order_date
      }));

  } catch (error) {
    console.error('üí• Exception r√©cup√©ration filleuls:', error);
    return [];
  }
};

// ===== CALCUL DES STATISTIQUES (ENRICHI) =====
export const calculateStats = (filleuls: FilleulData[]): ReferralStats => {
  const unMoisAgo = new Date();
  unMoisAgo.setMonth(unMoisAgo.getMonth() - 1);

  return {
    totalFilleuls: filleuls.length,
    filleulesActifs: filleuls.filter(f => f.statut === 'active' || f.statut === 'pending').length,
    filleulesClients: filleuls.filter(f => f.type === 'client').length,
    filleulesFourmiz: filleuls.filter(f => f.type === 'fourmiz').length,
    filleulesProfilComplet: filleuls.filter(f => f.profileCompleted).length,
    filleulesRecents: filleuls.filter(f => new Date(f.dateParrainage) > unMoisAgo).length,
    // ‚ûï NOUVELLES STATS financi√®res
    totalBonusEarned: filleuls.reduce((sum, f) => sum + f.bonusEarned, 0),
    totalCommissionEarned: filleuls.reduce((sum, f) => sum + f.totalCommissionEarned, 0),
    filleulesWithFirstOrder: filleuls.filter(f => f.firstOrderCompleted).length
  };
};

// ===== CHARGEMENT DONN√âES COMPL√àTES (CORRIG√â) =====
export const loadReferralData = async (userId: string) => {
  try {
    console.log('üîÑ Chargement donn√©es compl√®tes pour:', userId);

    // 1. Code de l'utilisateur
    const { data: userCode } = await supabase
      .from('user_referral_codes')
      .select('code, is_active, created_at, usage_count')  // ‚ûï usage_count
      .eq('user_id', userId)
      .eq('is_active', true)
      .single();

    // 2. Ses filleuls
    const filleuls = await getUserReferrals(userId);

    // 3. Son parrain (‚úÖ CORRIG√â)
    const { data: parrainData } = await supabase
      .from('user_referrals')
      .select(`
        id,
        referral_code,
        created_at,
        bonus_earned,
        total_commission_earned,
        referrer_user:referrer_user_id (
          id,
          firstname,
          lastname
        )
      `)
      .eq('referred_user_id', userId)  // ‚úÖ Nom correct
      .single();

    // 4. Statistiques
    const stats = calculateStats(filleuls);

    return {
      userCode: userCode?.code || null,
      codeCreatedAt: userCode?.created_at || null,
      codeUsageCount: userCode?.usage_count || 0,  // ‚ûï NOUVEAU
      filleuls,
      parrain: parrainData ? {
        id: parrainData.id,
        name: `${parrainData.referrer_user.firstname} ${parrainData.referrer_user.lastname}`,
        codeUtilise: parrainData.referral_code,
        dateParrainage: parrainData.created_at,
        // ‚ûï NOUVELLES DONN√âES financi√®res du parrainage
        bonusEarned: parseFloat(parrainData.bonus_earned || '0'),
        totalCommissionEarned: parseFloat(parrainData.total_commission_earned || '0')
      } : null,
      stats
    };

  } catch (error) {
    console.error('üí• Erreur chargement donn√©es:', error);
    return {
      userCode: null,
      codeCreatedAt: null,
      codeUsageCount: 0,
      filleuls: [],
      parrain: null,
      stats: calculateStats([])
    };
  }
};

// ‚ûï NOUVELLES FONCTIONS pour g√©rer les bonus/commissions

// D√©clencher le bonus de premi√®re commande
export const triggerFirstOrderBonus = async (userId: string, orderId: number, orderAmount: number) => {
  try {
    console.log('üéÅ D√©clenchement bonus premi√®re commande pour:', userId);

    // 1. Trouver le parrainage de cet utilisateur
    const { data: referralData, error: findError } = await supabase
      .from('user_referrals')
      .select('id, referrer_user_id, bonus_earned, first_order_completed')
      .eq('referred_user_id', userId)
      .eq('first_order_completed', false)  // Seulement si pas encore fait
      .single();

    if (findError || !referralData) {
      console.log('‚ÑπÔ∏è Pas de parrainage en attente pour cet utilisateur');
      return { success: false, message: 'Pas de parrainage en attente' };
    }

    // 2. Configuration du bonus (pour l'instant hardcod√©, √† rendre dynamique plus tard)
    const BONUS_AMOUNT = 10.00;
    
    // 3. Mettre √† jour le parrainage avec le bonus
    const { error: updateError } = await supabase
      .from('user_referrals')
      .update({
        bonus_earned: BONUS_AMOUNT,
        first_order_completed: true,
        first_order_date: new Date().toISOString(),
        status: 'active',
        updated_at: new Date().toISOString()
      })
      .eq('id', referralData.id);

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour bonus:', updateError);
      return { success: false, message: 'Erreur technique' };
    }

    console.log(`‚úÖ Bonus de ${BONUS_AMOUNT}‚Ç¨ attribu√© au parrain`);
    
    return {
      success: true,
      message: 'Bonus de parrainage attribu√©',
      bonusAmount: BONUS_AMOUNT,
      referrerId: referralData.referrer_user_id
    };

  } catch (error) {
    console.error('üí• Erreur bonus premi√®re commande:', error);
    return { success: false, message: 'Erreur technique' };
  }
};

// Ajouter une commission sur une commande r√©currente
export const addCommission = async (userId: string, commissionAmount: number) => {
  try {
    console.log('üí∞ Ajout commission pour:', userId, 'montant:', commissionAmount);

    const { data: referralData, error: findError } = await supabase
      .from('user_referrals')
      .select('id, total_commission_earned')
      .eq('referred_user_id', userId)
      .single();

    if (findError || !referralData) {
      console.log('‚ÑπÔ∏è Pas de parrainage trouv√© pour cet utilisateur');
      return { success: false, message: 'Pas de parrainage trouv√©' };
    }

    const newTotal = parseFloat(referralData.total_commission_earned || '0') + commissionAmount;

    const { error: updateError } = await supabase
      .from('user_referrals')
      .update({
        total_commission_earned: newTotal,
        updated_at: new Date().toISOString()
      })
      .eq('id', referralData.id);

    if (updateError) {
      console.error('‚ùå Erreur ajout commission:', updateError);
      return { success: false, message: 'Erreur technique' };
    }

    console.log(`‚úÖ Commission de ${commissionAmount}‚Ç¨ ajout√©e (total: ${newTotal}‚Ç¨)`);
    
    return {
      success: true,
      message: 'Commission ajout√©e',
      commissionAmount,
      newTotal
    };

  } catch (error) {
    console.error('üí• Erreur ajout commission:', error);
    return { success: false, message: 'Erreur technique' };
  }
};

// ‚ûï FONCTION UTILITAIRE pour v√©rifier si un utilisateur peut √™tre parrain√©
export const canUserBeReferred = async (userId: string): Promise<boolean> => {
  try {
    const { data: existingReferral } = await supabase
      .from('user_referrals')
      .select('id')
      .eq('referred_user_id', userId)
      .single();

    // Si aucun parrainage trouv√©, l'utilisateur peut √™tre parrain√©
    return !existingReferral;

  } catch (error) {
    console.error('Erreur v√©rification √©ligibilit√© parrainage:', error);
    return false;
  }
};

// ‚ûï FONCTION UTILITAIRE pour obtenir les gains totaux d'un parrain
export const getTotalEarnings = async (parrainId: string) => {
  try {
    const { data: earnings, error } = await supabase
      .from('user_referrals')
      .select('bonus_earned, total_commission_earned')
      .eq('referrer_user_id', parrainId);

    if (error || !earnings) {
      return { totalBonus: 0, totalCommission: 0, totalEarnings: 0 };
    }

    const totalBonus = earnings.reduce((sum, e) => sum + parseFloat(e.bonus_earned || '0'), 0);
    const totalCommission = earnings.reduce((sum, e) => sum + parseFloat(e.total_commission_earned || '0'), 0);

    return {
      totalBonus,
      totalCommission,
      totalEarnings: totalBonus + totalCommission
    };

  } catch (error) {
    console.error('Erreur calcul gains totaux:', error);
    return { totalBonus: 0, totalCommission: 0, totalEarnings: 0 };
  }
};

// ===== EXPORT PAR D√âFAUT AVEC TOUTES LES FONCTIONS =====
export default {
  // Fonctions principales
  validateReferralCode,
  createReferralLink,
  createReferralLinkLegacy,
  applyReferral,
  
  // G√©n√©ration et codes
  generateUniqueCode,
  
  // R√©cup√©ration donn√©es
  getUserReferrals,
  loadReferralData,
  calculateStats,
  
  // Bonus et commissions
  triggerFirstOrderBonus,
  addCommission,
  getTotalEarnings,
  
  // Utilitaires
  canUserBeReferred
};