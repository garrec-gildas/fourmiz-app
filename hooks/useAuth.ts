// hooks/useAuth.ts - HOOK D'AUTHENTIFICATION CORRIG√â ET OPTIMIS√â
// üîß Version compl√®te avec r√©paration automatique des profils manquants

import { useState, useEffect, useCallback, useRef } from 'react';
import { Alert, Platform } from 'react-native';
import { router } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {
  supabase,
  handleSupabaseError,
  getCurrentUser,
  getCurrentSession,
  onAuthStateChange,
  Database
} from '../lib/supabase';

// ‚úÖ TYPES TYPESCRIPT STRICTS
type UserRole = 'client' | 'fourmiz' | 'admin';

interface UserProfile {
  id: string;
  email: string;
  firstname: string | null;
  lastname: string | null;
  phone: string | null;
  address: string | null;
  city: string | null;
  postal_code: string | null;
  building: string | null;
  floor: string | null;
  roles: UserRole[];
  profile_completed: boolean;
  avatar_url: string | null;
  rib: string | null;
  id_document_path: string | null;
  created_at: string;
  updated_at: string;
}

interface AuthUser {
  id: string;
  email: string;
  email_confirmed_at?: string;
  created_at: string;
  profile?: UserProfile;
}

interface AuthState {
  // √âtats de base
  isAuthenticated: boolean;
  isLoading: boolean;
  isInitialized: boolean;
  
  // Utilisateur et profil
  user: AuthUser | null;
  profile: UserProfile | null;
  
  // √âtats de processus
  isSigningIn: boolean;
  isSigningUp: boolean;
  isSigningOut: boolean;
  isRefreshing: boolean;
  
  // Erreurs et retry
  error: string | null;
  retryCount: number;
  lastError: Date | null;
}

interface SignInData {
  email: string;
  password: string;
  rememberMe?: boolean;
}

interface SignUpData {
  email: string;
  password: string;
  firstname: string;
  roles: UserRole[];
}

interface UseAuthReturn extends AuthState {
  // M√©thodes d'authentification
  signIn: (data: SignInData) => Promise<{ success: boolean; requiresProfile?: boolean }>;
  signUp: (data: SignUpData) => Promise<{ success: boolean; needsConfirmation?: boolean }>;
  signOut: () => Promise<void>;
  
  // M√©thodes de profil
  refreshProfile: () => Promise<void>;
  updateProfile: (updates: Partial<UserProfile>) => Promise<boolean>;
  
  // M√©thodes utilitaires
  hasRole: (role: UserRole) => boolean;
  hasAnyRole: (roles: UserRole[]) => boolean;
  isAdmin: () => boolean;
  requireAuth: (redirectTo?: string) => boolean;
  
  // M√©thodes de r√©cup√©ration
  resetPassword: (email: string) => Promise<boolean>;
  
  // Nouvelles m√©thodes de r√©paration
  ensureProfileExists: (user: AuthUser) => Promise<UserProfile | null>;
  repairUserProfile: () => Promise<void>;
  
  // Debug et utilitaires
  clearAuthData: () => Promise<void>;
  savePushTokenSafely: (token: string) => Promise<void>;
}

// üîê CONSTANTES
const AUTH_STORAGE_KEYS = {
  REMEMBER_EMAIL: 'fourmiz_remember_email',
  REMEMBER_ME: 'fourmiz_remember_me',
  USER_ROLE: 'fourmiz_user_role',
  PROFILE_CACHE: 'fourmiz_profile_cache',
  CACHE_TIME: 'fourmiz_cache_time',
} as const;

const AUTHORIZED_ADMIN_EMAILS = [
  'garrec.gildas@gmail.com',
  // Ajouter d'autres emails admin autoris√©s
] as const;

const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes
const MAX_RETRY_ATTEMPTS = 3;
const RETRY_DELAY_BASE = 2000; // 2 secondes

// üöÄ HOOK PRINCIPAL
export const useAuth = (): UseAuthReturn => {
  // ‚úÖ √âTAT LOCAL
  const [state, setState] = useState<AuthState>({
    isAuthenticated: false,
    isLoading: true,
    isInitialized: false,
    user: null,
    profile: null,
    isSigningIn: false,
    isSigningUp: false,
    isSigningOut: false,
    isRefreshing: false,
    error: null,
    retryCount: 0,
    lastError: null,
  });

  // R√©f√©rences pour √©viter les re-renders
  const authListenerRef = useRef<{ data: { subscription: any } } | null>(null);
  const isInitializingRef = useRef(false);

  // üõ†Ô∏è HELPERS INTERNES
  const updateState = useCallback((updates: Partial<AuthState>) => {
    setState(prev => ({ ...prev, ...updates }));
  }, []);

  const setError = useCallback((error: string | null) => {
    updateState({ 
      error,
      lastError: error ? new Date() : null 
    });
  }, [updateState]);

  const clearError = useCallback(() => {
    updateState({ 
      error: null, 
      retryCount: 0,
      lastError: null 
    });
  }, [updateState]);

  // üßπ NETTOYER LES TOKENS PUSH ORPHELINS
  const cleanupOrphanedPushTokens = useCallback(async (userId: string) => {
    try {
      console.log('üßπ Nettoyage des tokens push orphelins pour:', userId);
      
      const { error } = await supabase
        .from('push_tokens')
        .delete()
        .eq('user_id', userId);

      if (error) {
        console.warn('‚ö†Ô∏è Erreur nettoyage tokens push:', error);
      } else {
        console.log('‚úÖ Tokens push nettoy√©s');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur dans cleanupOrphanedPushTokens:', error);
    }
  }, []);

  // üîç FONCTION DE DIAGNOSTIC ET CR√âATION DE PROFIL
  const ensureProfileExists = useCallback(async (currentUser: AuthUser): Promise<UserProfile | null> => {
    if (!currentUser?.id) return null;

    try {
      console.log('üîç V√©rification du profil pour:', currentUser.email);

      // 1. V√©rifier si le profil existe
      const { data: existingProfile, error: fetchError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', currentUser.id)
        .single();

      // Si le profil existe, le retourner
      if (!fetchError && existingProfile) {
        console.log('‚úÖ Profil existant trouv√©');
        return existingProfile as UserProfile;
      }

      // Si erreur autre que "profil non trouv√©", la propager
      if (fetchError && fetchError.code !== 'PGRST116') {
        console.error('‚ùå Erreur lors de la v√©rification du profil:', fetchError);
        throw fetchError;
      }

      // 2. Cr√©er le profil s'il n'existe pas
      console.log('üîß Cr√©ation du profil manquant pour:', currentUser.email);
      
      const newProfile = {
        id: currentUser.id,
        email: currentUser.email,
        firstname: extractFirstName(currentUser.email),
        lastname: extractLastName(currentUser.email),
        phone: null,
        address: null,
        city: null,
        postal_code: null,
        building: null,
        floor: null,
        roles: ['client'] as UserRole[], // R√¥le par d√©faut
        profile_completed: false,
        avatar_url: null,
        rib: null,
        id_document_path: null,
        created_at: currentUser.created_at || new Date().toISOString(),
        updated_at: new Date().toISOString(),
      };

      const { data: createdProfile, error: createError } = await supabase
        .from('profiles')
        .insert([newProfile])
        .select()
        .single();

      if (createError) {
        console.error('‚ùå Erreur cr√©ation profil:', createError);
        throw createError;
      }

      console.log('‚úÖ Profil cr√©√© avec succ√®s:', createdProfile.email);
      
      // Nettoyer les tokens push orphelins √©ventuels
      await cleanupOrphanedPushTokens(currentUser.id);
      
      return createdProfile as UserProfile;

    } catch (error: any) {
      console.error('üí• Erreur dans ensureProfileExists:', error);
      const { userMessage } = handleSupabaseError(error, 'Cr√©ation de profil');
      setError(userMessage);
      return null;
    }
  }, [cleanupOrphanedPushTokens, setError]);

  // üìã CHARGEMENT DU PROFIL UTILISATEUR AM√âLIOR√â
  const loadUserProfile = useCallback(async (userId: string, useCache = true): Promise<UserProfile | null> => {
    try {
      console.log('üìã Chargement du profil utilisateur:', userId);

      // V√©rifier le cache si demand√©
      if (useCache) {
        try {
          const cachedProfile = await AsyncStorage.getItem(`${AUTH_STORAGE_KEYS.PROFILE_CACHE}_${userId}`);
          const cacheTime = await AsyncStorage.getItem(`${AUTH_STORAGE_KEYS.CACHE_TIME}_${userId}`);
          
          if (cachedProfile && cacheTime && 
              Date.now() - parseInt(cacheTime) < CACHE_DURATION) {
            console.log('‚úÖ Profil charg√© depuis le cache');
            return JSON.parse(cachedProfile) as UserProfile;
          }
        } catch (cacheError) {
          console.warn('‚ö†Ô∏è Erreur lecture cache profil:', cacheError);
        }
      }

      const { data: profileData, error } = await supabase
        .from('profiles')
        .select(`
          id,
          email,
          firstname,
          lastname,
          phone,
          address,
          city,
          postal_code,
          building,
          floor,
          roles,
          profile_completed,
          avatar_url,
          rib,
          id_document_path,
          created_at,
          updated_at
        `)
        .eq('id', userId)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          console.log('‚ÑπÔ∏è Aucun profil trouv√© pour cet utilisateur');
          return null;
        }
        
        console.error('‚ùå Erreur chargement profil:', error);
        const { userMessage } = handleSupabaseError(error, 'Chargement profil');
        throw new Error(userMessage);
      }

      const profile = profileData as UserProfile;

      // Mettre en cache
      try {
        await AsyncStorage.setItem(`${AUTH_STORAGE_KEYS.PROFILE_CACHE}_${userId}`, JSON.stringify(profile));
        await AsyncStorage.setItem(`${AUTH_STORAGE_KEYS.CACHE_TIME}_${userId}`, Date.now().toString());
      } catch (cacheError) {
        console.warn('‚ö†Ô∏è Erreur mise en cache profil:', cacheError);
      }

      console.log('‚úÖ Profil utilisateur charg√©:', profile.email);
      return profile;

    } catch (error: any) {
      console.error('‚ùå Exception loadUserProfile:', error);
      
      // Retry automatique en cas d'erreur r√©seau
      if (state.retryCount < MAX_RETRY_ATTEMPTS && 
          error.message?.toLowerCase().includes('network')) {
        const delay = RETRY_DELAY_BASE * (state.retryCount + 1);
        console.log(`üîÑ Retry automatique dans ${delay}ms (tentative ${state.retryCount + 1}/${MAX_RETRY_ATTEMPTS})`);
        
        updateState({ retryCount: state.retryCount + 1 });
        
        setTimeout(() => {
          loadUserProfile(userId, false);
        }, delay);
      }
      
      return null;
    }
  }, [state.retryCount, updateState]);

  // üîß FONCTION DE R√âPARATION COMPL√àTE
  const repairUserProfile = useCallback(async (): Promise<void> => {
    try {
      console.log('üîß D√©but de la r√©paration du profil utilisateur');
      
      const session = await getCurrentSession();
      const user = await getCurrentUser();

      if (!session || !user) {
        console.log('‚ùå Aucun utilisateur connect√© pour la r√©paration');
        return;
      }

      console.log('‚úÖ Utilisateur trouv√© pour r√©paration:', user.email);

      const authUser: AuthUser = {
        id: user.id,
        email: user.email,
        email_confirmed_at: user.email_confirmed_at,
        created_at: user.created_at,
      };

      // V√©rifier/cr√©er le profil
      const profile = await ensureProfileExists(authUser);
      
      if (!profile) {
        throw new Error('Impossible de cr√©er ou r√©cup√©rer le profil utilisateur');
      }

      // Mettre √† jour l'√©tat
      updateState({
        user: { ...authUser, profile },
        profile,
        isAuthenticated: true,
        error: null,
        retryCount: 0,
      });

      console.log('‚úÖ R√©paration termin√©e avec succ√®s');

    } catch (error: any) {
      console.error('üí• Erreur dans repairUserProfile:', error);
      setError(error.message);
    }
  }, [ensureProfileExists, updateState, setError]);

  // üîÑ INITIALISATION DE L'AUTHENTIFICATION AM√âLIOR√âE
  const initializeAuth = useCallback(async (): Promise<void> => {
    if (isInitializingRef.current) return;
    isInitializingRef.current = true;

    try {
      console.log('üîÑ Initialisation de l\'authentification...');
      
      clearError();
      updateState({ isLoading: true });

      // R√©cup√©rer la session actuelle
      const session = await getCurrentSession();
      const user = await getCurrentUser();

      if (!session || !user) {
        console.log('‚ÑπÔ∏è Aucune session active');
        updateState({ 
          isAuthenticated: false, 
          user: null, 
          profile: null,
          isLoading: false,
          isInitialized: true 
        });
        return;
      }

      console.log('‚úÖ Session active trouv√©e:', user.email);

      const authUser: AuthUser = {
        id: user.id,
        email: user.email,
        email_confirmed_at: user.email_confirmed_at,
        created_at: user.created_at,
      };

      // Charger ou cr√©er le profil utilisateur
      let profile = await loadUserProfile(user.id);
      
      // Si pas de profil, essayer de le cr√©er
      if (!profile) {
        console.log('üîß Aucun profil trouv√©, cr√©ation automatique...');
        profile = await ensureProfileExists(authUser);
      }

      // Mettre √† jour l'√©tat
      updateState({
        isAuthenticated: !!profile,
        user: { ...authUser, profile: profile || undefined },
        profile,
        isLoading: false,
        isInitialized: true
      });

      if (profile) {
        console.log('üéâ Authentification initialis√©e avec succ√®s');
      } else {
        console.warn('‚ö†Ô∏è Authentification initialis√©e mais sans profil');
        setError('Impossible de charger ou cr√©er votre profil utilisateur');
      }

    } catch (error: any) {
      console.error('‚ùå Erreur initialisation auth:', error);
      setError('Erreur d\'initialisation de l\'authentification');
      
      updateState({ 
        isAuthenticated: false, 
        user: null, 
        profile: null,
        isLoading: false,
        isInitialized: true 
      });
    } finally {
      isInitializingRef.current = false;
    }
  }, [loadUserProfile, ensureProfileExists, updateState, clearError, setError]);

  // üíæ SAUVEGARDE S√âCURIS√âE DES PUSH TOKENS
  const savePushTokenSafely = useCallback(async (token: string): Promise<void> => {
    try {
      if (!state.user?.id || !token) {
        console.warn('‚ö†Ô∏è Token ou userId manquant pour sauvegarde push token');
        return;
      }

      console.log('üíæ Sauvegarde s√©curis√©e du push token...');

      // 1. V√©rifier que le profil existe
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('id')
        .eq('id', state.user.id)
        .single();

      if (profileError || !profile) {
        console.error('‚ùå Profil non trouv√© pour userId:', state.user.id);
        // Essayer de r√©parer le profil
        await repairUserProfile();
        return;
      }

      // 2. Supprimer les anciens tokens pour cet utilisateur
      await supabase
        .from('push_tokens')
        .delete()
        .eq('user_id', state.user.id);

      // 3. Ins√©rer le nouveau token
      const { data, error } = await supabase
        .from('push_tokens')
        .insert([{
          user_id: state.user.id,
          token: token,
          device_type: Platform.OS,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        }])
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erreur sauvegarde token:', error);
        throw error;
      }

      console.log('‚úÖ Push token sauvegard√© avec succ√®s');

    } catch (error: any) {
      console.error('üí• Erreur dans savePushTokenSafely:', error);
      // Ne pas faire √©chouer l'app pour un probl√®me de push token
    }
  }, [state.user, repairUserProfile]);

  // üîê CONNEXION AM√âLIOR√âE
  const signIn = useCallback(async (data: SignInData): Promise<{ success: boolean; requiresProfile?: boolean }> => {
    try {
      console.log('üîê === D√âBUT CONNEXION ===');
      console.log('üìß Email:', data.email);

      clearError();
      updateState({ isSigningIn: true });

      // Validation
      if (!data.email.trim() || !data.password) {
        throw new Error('Email et mot de passe requis');
      }

      // Tentative de connexion
      const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
        email: data.email.trim().toLowerCase(),
        password: data.password
      });

      if (signInError) {
        console.error('‚ùå Erreur connexion:', signInError);
        const { userMessage } = handleSupabaseError(signInError, 'Connexion');
        throw new Error(userMessage);
      }

      if (!signInData.user) {
        throw new Error('Impossible de r√©cup√©rer les informations utilisateur');
      }

      console.log('‚úÖ Connexion r√©ussie');

      const authUser: AuthUser = {
        id: signInData.user.id,
        email: signInData.user.email,
        email_confirmed_at: signInData.user.email_confirmed_at,
        created_at: signInData.user.created_at,
      };

      // Charger ou cr√©er le profil
      let profile = await loadUserProfile(signInData.user.id, false);
      
      if (!profile) {
        console.log('üîß Profil manquant d√©tect√©, cr√©ation...');
        profile = await ensureProfileExists(authUser);
      }
      
      // Sauvegarder les pr√©f√©rences
      if (data.rememberMe) {
        await AsyncStorage.setItem(AUTH_STORAGE_KEYS.REMEMBER_EMAIL, data.email.trim().toLowerCase());
        await AsyncStorage.setItem(AUTH_STORAGE_KEYS.REMEMBER_ME, 'true');
      }

      // Sauvegarder le r√¥le par d√©faut
      if (profile?.roles && profile.roles.length > 0) {
        await AsyncStorage.setItem(AUTH_STORAGE_KEYS.USER_ROLE, profile.roles[0]);
      }

      // Mettre √† jour l'√©tat
      updateState({
        isAuthenticated: !!profile,
        user: { ...authUser, profile: profile || undefined },
        profile,
        isSigningIn: false
      });

      console.log('üéâ Connexion termin√©e avec succ√®s');

      return { 
        success: true, 
        requiresProfile: !profile?.profile_completed 
      };

    } catch (error: any) {
      console.error('üí• ERREUR CONNEXION:', error);
      setError(error.message);
      updateState({ isSigningIn: false });
      return { success: false };
    }
  }, [loadUserProfile, ensureProfileExists, updateState, clearError, setError]);

  // üìù INSCRIPTION AM√âLIOR√âE
  const signUp = useCallback(async (data: SignUpData): Promise<{ success: boolean; needsConfirmation?: boolean }> => {
    try {
      console.log('üìù === D√âBUT INSCRIPTION ===');
      console.log('üìß Email:', data.email);
      console.log('üé≠ R√¥les:', data.roles);

      clearError();
      updateState({ isSigningUp: true });

      // Validation
      if (!data.email.trim() || !data.password || !data.firstname.trim()) {
        throw new Error('Tous les champs sont requis');
      }

      if (data.roles.length === 0) {
        throw new Error('Au moins un r√¥le doit √™tre s√©lectionn√©');
      }

      // Tentative d'inscription
      const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
        email: data.email.trim().toLowerCase(),
        password: data.password,
        options: {
          data: {
            firstname: data.firstname.trim(),
            roles: data.roles
          }
        }
      });

      if (signUpError) {
        console.error('‚ùå Erreur inscription:', signUpError);
        const { userMessage } = handleSupabaseError(signUpError, 'Inscription');
        throw new Error(userMessage);
      }

      if (!signUpData.user) {
        throw new Error('Impossible de cr√©er le compte utilisateur');
      }

      console.log('‚úÖ Inscription r√©ussie');

      // Cr√©er le profil imm√©diatement si l'utilisateur est confirm√©
      if (signUpData.session) {
        const authUser: AuthUser = {
          id: signUpData.user.id,
          email: signUpData.user.email,
          email_confirmed_at: signUpData.user.email_confirmed_at,
          created_at: signUpData.user.created_at,
        };

        await ensureProfileExists(authUser);
      }

      updateState({ isSigningUp: false });

      console.log('üéâ Inscription termin√©e avec succ√®s');

      return { 
        success: true, 
        needsConfirmation: !signUpData.session 
      };

    } catch (error: any) {
      console.error('üí• ERREUR INSCRIPTION:', error);
      setError(error.message);
      updateState({ isSigningUp: false });
      return { success: false };
    }
  }, [ensureProfileExists, updateState, clearError, setError]);

  // üö™ D√âCONNEXION AM√âLIOR√âE
  const signOut = useCallback(async (): Promise<void> => {
    try {
      console.log('üö™ === D√âBUT D√âCONNEXION ===');

      clearError();
      updateState({ isSigningOut: true });

      // D√©connexion Supabase
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.error('‚ùå Erreur d√©connexion:', error);
        // Ne pas bloquer la d√©connexion pour une erreur Supabase
      }

      // Nettoyer les donn√©es locales (optionnel)
      try {
        const rememberMe = await AsyncStorage.getItem(AUTH_STORAGE_KEYS.REMEMBER_ME);
        if (rememberMe !== 'true') {
          await AsyncStorage.removeItem(AUTH_STORAGE_KEYS.REMEMBER_EMAIL);
        }
        
        // Nettoyer le cache
        if (state.user?.id) {
          await AsyncStorage.removeItem(`${AUTH_STORAGE_KEYS.PROFILE_CACHE}_${state.user.id}`);
          await AsyncStorage.removeItem(`${AUTH_STORAGE_KEYS.CACHE_TIME}_${state.user.id}`);
        }
        
        await AsyncStorage.removeItem(AUTH_STORAGE_KEYS.USER_ROLE);
      } catch (storageError) {
        console.warn('‚ö†Ô∏è Erreur nettoyage stockage:', storageError);
      }

      // R√©initialiser l'√©tat
      updateState({
        isAuthenticated: false,
        user: null,
        profile: null,
        isSigningOut: false,
        retryCount: 0,
        error: null,
      });

      console.log('‚úÖ D√©connexion r√©ussie');

    } catch (error: any) {
      console.error('üí• ERREUR D√âCONNEXION:', error);
      setError(error.message);
      
      // En cas d'erreur, forcer la r√©initialisation locale
      updateState({
        isAuthenticated: false,
        user: null,
        profile: null,
        isSigningOut: false,
      });
    }
  }, [state.user, updateState, clearError, setError]);

  // üîÑ RAFRA√éCHIR LE PROFIL AM√âLIOR√â
  const refreshProfile = useCallback(async (): Promise<void> => {
    if (!state.user?.id) return;

    try {
      console.log('üîÑ Rafra√Æchissement du profil...');
      
      updateState({ isRefreshing: true });
      
      // Forcer le rechargement sans cache
      const profile = await loadUserProfile(state.user.id, false);
      
      updateState({
        profile,
        user: { ...state.user, profile: profile || undefined },
        isRefreshing: false
      });

      console.log('‚úÖ Profil rafra√Æchi');

    } catch (error: any) {
      console.error('‚ùå Erreur rafra√Æchissement profil:', error);
      setError('Impossible de rafra√Æchir le profil');
      updateState({ isRefreshing: false });
    }
  }, [state.user, loadUserProfile, updateState, setError]);

  // üìù METTRE √Ä JOUR LE PROFIL
  const updateProfile = useCallback(async (updates: Partial<UserProfile>): Promise<boolean> => {
    if (!state.user?.id) return false;

    try {
      console.log('üìù Mise √† jour du profil...');

      const { error } = await supabase
        .from('profiles')
        .update({
          ...updates,
          updated_at: new Date().toISOString()
        })
        .eq('id', state.user.id);

      if (error) {
        console.error('‚ùå Erreur mise √† jour profil:', error);
        const { userMessage } = handleSupabaseError(error, 'Mise √† jour profil');
        throw new Error(userMessage);
      }

      // Rafra√Æchir le profil
      await refreshProfile();

      console.log('‚úÖ Profil mis √† jour');
      return true;

    } catch (error: any) {
      console.error('üí• ERREUR MISE √Ä JOUR PROFIL:', error);
      setError(error.message);
      return false;
    }
  }, [state.user, refreshProfile, setError]);

  // üîê R√âCUP√âRATION MOT DE PASSE
  const resetPassword = useCallback(async (email: string): Promise<boolean> => {
    try {
      console.log('üîê R√©cup√©ration mot de passe pour:', email);

      const redirectUrl = `${process.env.EXPO_PUBLIC_APP_URL || 'exp://127.0.0.1:8081'}/auth/recovery-redirect`;
      
      const { error } = await supabase.auth.resetPasswordForEmail(
        email.trim().toLowerCase(),
        { redirectTo: redirectUrl }
      );

      if (error) {
        console.error('‚ùå Erreur reset password:', error);
        const { userMessage } = handleSupabaseError(error, 'R√©cup√©ration mot de passe');
        throw new Error(userMessage);
      }

      console.log('‚úÖ Email de r√©cup√©ration envoy√©');
      return true;

    } catch (error: any) {
      console.error('üí• ERREUR RESET PASSWORD:', error);
      setError(error.message);
      return false;
    }
  }, [setError]);

  // üõ†Ô∏è M√âTHODES UTILITAIRES
  const hasRole = useCallback((role: UserRole): boolean => {
    return state.profile?.roles?.includes(role) || false;
  }, [state.profile]);

  const hasAnyRole = useCallback((roles: UserRole[]): boolean => {
    return roles.some(role => hasRole(role));
  }, [hasRole]);

  const isAdmin = useCallback((): boolean => {
    return hasRole('admin') || AUTHORIZED_ADMIN_EMAILS.includes(state.user?.email || '');
  }, [hasRole, state.user]);

  const requireAuth = useCallback((redirectTo: string = '/auth/signin'): boolean => {
    if (!state.isAuthenticated || !state.user) {
      Alert.alert(
        'Authentification requise',
        'Vous devez √™tre connect√© pour acc√©der √† cette fonctionnalit√©',
        [{ text: 'Se connecter', onPress: () => router.replace(redirectTo) }]
      );
      return false;
    }
    return true;
  }, [state.isAuthenticated, state.user]);

  // üßπ NETTOYER LES DONN√âES (DEV ONLY)
  const clearAuthData = useCallback(async (): Promise<void> => {
    if (__DEV__) {
      try {
        const keys = Object.values(AUTH_STORAGE_KEYS);
        await AsyncStorage.multiRemove(keys);
        
        // Nettoyer aussi les caches sp√©cifiques √† l'utilisateur
        if (state.user?.id) {
          await AsyncStorage.removeItem(`${AUTH_STORAGE_KEYS.PROFILE_CACHE}_${state.user.id}`);
          await AsyncStorage.removeItem(`${AUTH_STORAGE_KEYS.CACHE_TIME}_${state.user.id}`);
        }
        
        console.log('üßπ Donn√©es d\'authentification nettoy√©es (DEV)');
      } catch (error) {
        console.error('‚ùå Erreur nettoyage donn√©es auth:', error);
      }
    }
  }, [state.user]);

  // üîÑ LISTENER D'AUTHENTIFICATION
  useEffect(() => {
    console.log('üîÑ Configuration du listener d\'authentification...');

    // Nettoyer le listener pr√©c√©dent
    if (authListenerRef.current) {
      authListenerRef.current.data.subscription.unsubscribe();
    }

    // Configurer le nouveau listener
    authListenerRef.current = onAuthStateChange(async (user) => {
      console.log('üîÑ √âtat d\'authentification chang√©:', user?.email || 'D√©connect√©');
      
      if (state.isInitialized && !isInitializingRef.current) {
        // Si d√©j√† initialis√©, rafra√Æchir l'√©tat
        await initializeAuth();
      }
    });

    // Cleanup
    return () => {
      if (authListenerRef.current) {
        authListenerRef.current.data.subscription.unsubscribe();
      }
    };
  }, [state.isInitialized, initializeAuth]);

  // üöÄ INITIALISATION AU MONTAGE
  useEffect(() => {
    initializeAuth();
  }, [initializeAuth]);

  // üìä RETURN COMPLET
  return {
    // √âtats
    ...state,
    
    // M√©thodes d'authentification
    signIn,
    signUp,
    signOut,
    
    // M√©thodes de profil
    refreshProfile,
    updateProfile,
    
    // M√©thodes utilitaires
    hasRole,
    hasAnyRole,
    isAdmin,
    requireAuth,
    
    // M√©thodes de r√©cup√©ration
    resetPassword,
    
    // Nouvelles m√©thodes de r√©paration
    ensureProfileExists,
    repairUserProfile,
    
    // Debug et utilitaires
    clearAuthData,
    savePushTokenSafely,
  };
};

// üõ†Ô∏è FONCTIONS UTILITAIRES
const extractFirstName = (email: string): string => {
  if (!email) return '';
  const parts = email.split('@')[0].split('.');
  const firstName = parts[0];
  return firstName.charAt(0).toUpperCase() + firstName.slice(1).toLowerCase();
};

const extractLastName = (email: string): string => {
  if (!email) return '';
  const parts = email.split('@')[0].split('.');
  if (parts.length > 1) {
    const lastName = parts[1];
    return lastName.charAt(0).toUpperCase() + lastName.slice(1).toLowerCase();
  }
  return '';
};

// üéØ EXPORT PAR D√âFAUT
export default useAuth;